import { getAuthUser } from '@/lib/auth';
import { createClient } from '@/lib/supabase/server';
import { redirect } from 'next/navigation';
import UserButton from '@/components/auth/user-button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { MenuIcon, HomeIcon, BanknoteIcon, UsersIcon, PackageIcon, ShoppingCartIcon, BarChartIcon, LandmarkIcon } from 'lucide-react';
import Link from 'next/link';
import Image from 'next/image';

export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const user = await getAuthUser();
  const supabase = createClient();

  const { data: { user: authUser } } = await supabase.auth.getUser();

  if (!authUser) {
    redirect('/login');
  }

  return (
    <div className="grid min-h-screen w-full lg:grid-cols-[280px_1fr]">
      <div className="hidden border-r bg-gray-100/40 lg:block dark:bg-gray-800/40">
        <div className="flex h-full max-h-screen flex-col gap-2">
          <div className="flex h-[60px] items-center border-b px-6">
            <Link className="flex items-center gap-2 font-semibold" href="/dashboard">
              <Image src="/placeholder-logo.png" alt="Solar Vision ERP Logo" width={24} height={24} />
              <span>Solar Vision ERP</span>
            </Link>
            <UserButton user={user} />
          </div>
          <div className="flex-1 overflow-auto py-2">
            <nav className="grid items-start px-4 text-sm font-medium">
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-900 transition-all hover:text-gray-900 dark:text-gray-50 dark:hover:text-gray-50"
                href="/dashboard"
              >
                <HomeIcon className="h-4 w-4" />
                Dashboard
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/clients"
              >
                <UsersIcon className="h-4 w-4" />
                Clients
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/suppliers"
              >
                <LandmarkIcon className="h-4 w-4" />
                Suppliers
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/inventory"
              >
                <PackageIcon className="h-4 w-4" />
                Inventory
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/sales"
              >
                <ShoppingCartIcon className="h-4 w-4" />
                Sales
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/purchases"
              >
                <BarChartIcon className="h-4 w-4" />
                Purchases
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/expenses"
              >
                <BanknoteIcon className="h-4 w-4" />
                Expenses
              </Link>
              <Link
                className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 transition-all hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                href="/banking"
              >
                <LandmarkIcon className="h-4 w-4" />
                Banking
              </Link>
            </nav>
          </div>
        </div>
      </div>
      <div className="flex flex-col">
        <header className="flex h-14 lg:h*[60px] items-center gap-4 border-b bg-gray-100/40 px-6 dark:bg-gray-800/40">
          <Sheet>
            <SheetTrigger asChild>
              <Button className="lg:hidden bg-transparent" size="icon" variant="outline">
                <MenuIcon className="h-6 w-6" />
                <span className="sr-only">Toggle navigation menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="left">
              <Link className="flex items-center gap-2 font-semibold" href="/dashboard">
                <Image src="/placeholder-logo.png" alt="Solar Vision ERP Logo" width={24} height={24} />
                <span>Solar Vision ERP</span>
              </Link>
              <nav className="grid gap-2 text-lg font-medium">
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-900 hover:text-gray-900 dark:text-gray-50 dark:hover:text-gray-50" href="/dashboard">
                  <HomeIcon className="h-5 w-5" />
                  Dashboard
                </Link>
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" href="/clients">
                  <UsersIcon className="h-5 w-5" />
                  Clients
                </Link>
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" href="/suppliers">
                  <LandmarkIcon className="h-5 w-5" />
                  Suppliers
                </Link>
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" href="/inventory">
                  <PackageIcon className="h-5 w-5" />
                  Inventory
                </Link>
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" href="/sales">
                  <ShoppingCartIcon className="h-5 w-5" />
                  Sales
                </Link>
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" href="/purchases">
                  <BarChartIcon className="h-5 w-5" />
                  Purchases
                </Link>
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" href="/expenses">
                  <BanknoteIcon className="h-5 w-5" />
                  Expenses
                </Link>
                <Link className="mx-[-0.65rem] flex items-center gap-4 rounded-xl px-3 py-2 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50" href="/banking">
                  <LandmarkIcon className="h-5 w-5" />
                  Banking
                </Link>
              </nav>
            </SheetContent>
          </Sheet>
          <div className="w-full flex-1">{' '}</div>
          <UserButton user={user} />
        </header>
        {children}
      </div>
    </div>
  );
}
import { EditPurchaseForm } from '@/components/purchases/edit-purchase-form';

import { PurchaseForm } from '@/components/purchases/purchase-form';

import { PurchaseList } from '@/components/purchases/purchase-list';

import { EditSaleForm } from '@/components/sales/edit-sale-form';

import { SaleForm } from '@/components/sales/sale-form';

import { SalesList } from '@/components/sales/sales-list';

import { EditSupplierForm } from '@/components/suppliers/edit-supplier-form';

import { SupplierForm } from '@/components/suppliers/supplier-form';

import { SupplierList } from '@/components/suppliers/supplier-list';

'use client';

import { useFormState } from 'react-dom';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { createBankingAccount, updateBankingAccount, State } from '@/app/banking/actions';
import { BankingAccount } from '@/lib/supabase/types';
import { toast } from 'sonner';

interface BankingFormProps {
  bankingAccount?: BankingAccount;
}

export default function BankingForm({ bankingAccount }: BankingFormProps) {
  const initialState: State = { message: null, errors: {} };
  const updateBankingAccountWithId = updateBankingAccount.bind(null, bankingAccount?.id || '');
  const [state, formAction] = useFormState(
    bankingAccount ? updateBankingAccountWithId : createBankingAccount,
    initialState
  );

  if (state?.message) {
    if (state.message.includes('Failed')) {
      toast.error(state.message);
    } else {
      toast.success(state.message);
    }
  }

  return (
    <form action={formAction} className="space-y-4">
      <input type="hidden" name="id" value={bankingAccount?.id} />
      <div className="grid gap-2">
        <Label htmlFor="bank_name">Bank Name</Label>
        <Input
          id="bank_name"
          name="bank_name"
          type="text"
          defaultValue={bankingAccount?.bank_name || ''}
          required
          aria-describedby="bank-name-error"
        />
        {state?.errors?.bank_name && (
          <div id="bank-name-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.bank_name.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="account_name">Account Name</Label>
        <Input
          id="account_name"
          name="account_name"
          type="text"
          defaultValue={bankingAccount?.account_name || ''}
          required
          aria-describedby="account-name-error"
        />
        {state?.errors?.account_name && (
          <div id="account-name-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.account_name.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="account_number">Account Number</Label>
        <Input
          id="account_number"
          name="account_number"
          type="text"
          defaultValue={bankingAccount?.account_number || ''}
          required
          aria-describedby="account-number-error"
        />
        {state?.errors?.account_number && (
          <div id="account-number-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.account_number.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="balance">Balance</Label>
        <Input
          id="balance"
          name="balance"
          type="number"
          step="0.01"
          defaultValue={bankingAccount?.balance || 0}
          required
          aria-describedby="balance-error"
        />
        {state?.errors?.balance && (
          <div id="balance-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.balance.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <Button type="submit" className="w-full">
        {bankingAccount ? 'Update Account' : 'Create Account'}
      </Button>
    </form>
  );
}
'use client';

import { useFormState } from 'react-dom';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { createClientAction, updateClientAction, State } from '@/app/clients/actions';
import { Client } from '@/lib/supabase/types';
import { toast } from 'sonner';

interface ClientFormProps {
  client?: Client;
}

export default function ClientForm({ client }: ClientFormProps) {
  const initialState: State = { message: null, errors: {} };
  const updateClientWithId = updateClientAction.bind(null, client?.id || '');
  const [state, formAction] = useFormState(
    client ? updateClientWithId : createClientAction,
    initialState
  );

  if (state?.message) {
    if (state.message.includes('Failed')) {
      toast.error(state.message);
    } else {
      toast.success(state.message);
    }
  }

  return (
    <form action={formAction} className="space-y-4">
      <input type="hidden" name="id" value={client?.id} />
      <div className="grid gap-2">
        <Label htmlFor="name">Client Name</Label>
        <Input
          id="name"
          name="name"
          type="text"
          defaultValue={client?.name || ''}
          required
          aria-describedby="name-error"
        />
        {state?.errors?.name && (
          <div id="name-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.name.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="contact_person">Contact Person</Label>
        <Input
          id="contact_person"
          name="contact_person"
          type="text"
          defaultValue={client?.contact_person || ''}
          aria-describedby="contact-person-error"
        />
        {state?.errors?.contact_person && (
          <div id="contact-person-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.contact_person.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="email">Email</Label>
        <Input
          id="email"
          name="email"
          type="email"
          defaultValue={client?.email || ''}
          aria-describedby="email-error"
        />
        {state?.errors?.email && (
          <div id="email-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.email.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="phone_number">Phone Number</Label>
        <Input
          id="phone_number"
          name="phone_number"
          type="tel"
          defaultValue={client?.phone_number || ''}
          aria-describedby="phone-number-error"
        />
        {state?.errors?.phone_number && (
          <div id="phone-number-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.phone_number.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="address">Address</Label>
        <Textarea
          id="address"
          name="address"
          defaultValue={client?.address || ''}
          aria-describedby="address-error"
        />
        {state?.errors?.address && (
          <div id="address-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.address.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <Button type="submit" className="w-full">
        {client ? 'Update Client' : 'Create Client'}
      </Button>
    </form>
  );
}
'use client';

import { useFormState } from 'react-dom';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { createExpense, updateExpense, State } from '@/app/expenses/actions';
import { Expense } from '@/lib/supabase/types';
import { toast } from 'sonner';

interface ExpenseFormProps {
  expense?: Expense;
}

export default function ExpenseForm({ expense }: ExpenseFormProps) {
  const initialState: State = { message: null, errors: {} };
  const updateExpenseWithId = updateExpense.bind(null, expense?.id || '');
  const [state, formAction] = useFormState(
    expense ? updateExpenseWithId : createExpense,
    initialState
  );

  if (state?.message) {
    if (state.message.includes('Failed')) {
      toast.error(state.message);
    } else {
      toast.success(state.message);
    }
  }

  return (
    <form action={formAction} className="space-y-4">
      <input type="hidden" name="id" value={expense?.id} />
      <div className="grid gap-2">
        <Label htmlFor="amount">Amount</Label>
        <Input
          id="amount"
          name="amount"
          type="number"
          step="0.01"
          defaultValue={expense?.amount || 0}
          required
          aria-describedby="amount-error"
        />
        {state?.errors?.amount && (
          <div id="amount-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.amount.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="category">Category</Label>
        <Input
          id="category"
          name="category"
          type="text"
          defaultValue={expense?.category || ''}
          aria-describedby="category-error"
        />
        {state?.errors?.category && (
          <div id="category-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.category.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          name="description"
          defaultValue={expense?.description || ''}
          aria-describedby="description-error"
        />
        {state?.errors?.description && (
          <div id="description-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.description.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="date">Date</Label>
        <Input
          id="date"
          name="date"
          type="date"
          defaultValue={expense?.date || new Date().toISOString().split('T')[0]}
          required
          aria-describedby="date-error"
        />
        {state?.errors?.date && (
          <div id="date-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.date.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <Button type="submit" className="w-full">
        {expense ? 'Update Expense' : 'Create Expense'}
      </Button>
    </form>
  );
}
'use client';

import { useFormState } from 'react-dom';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { updateProduct, State } from '@/app/inventory/actions';
import { Product } from '@/lib/supabase/types';
import { toast } from 'sonner';

interface EditProductFormProps {
  product: Product;
}

export default function EditProductForm({ product }: EditProductFormProps) {
  const initialState: State = { message: null, errors: {} };
  const updateProductWithId = updateProduct.bind(null, product.id);
  const [state, formAction] = useFormState(updateProductWithId, initialState);

  if (state?.message) {
    if (state.message.includes('Failed')) {
      toast.error(state.message);
    } else {
      toast.success(state.message);
    }
  }

  return (
    <form action={formAction} className="space-y-4">
      <input type="hidden" name="id" value={product.id} />
      <div className="grid gap-2">
        <Label htmlFor="name">Product Name</Label>
        <Input
          id="name"
          name="name"
          type="text"
          defaultValue={product.name}
          required
          aria-describedby="name-error"
        />
        {state?.errors?.name && (
          <div id="name-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.name.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          name="description"
          defaultValue={product.description || ''}
          aria-describedby="description-error"
        />
        {state?.errors?.description && (
          <div id="description-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.description.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="price">Price</Label>
        <Input
          id="price"
          name="price"
          type="number"
          step="0.01"
          defaultValue={product.price}
          required
          aria-describedby="price-error"
        />
        {state?.errors?.price && (
          <div id="price-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.price.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="stock_quantity">Stock Quantity</Label>
        <Input
          id="stock_quantity"
          name="stock_quantity"
          type="number"
          defaultValue={product.stock_quantity}
          required
          aria-describedby="stock-quantity-error"
        />
        {state?.errors?.stock_quantity && (
          <div id="stock-quantity-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.stock_quantity.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="sku">SKU</Label>
        <Input
          id="sku"
          name="sku"
          type="text"
          defaultValue={product.sku || ''}
          aria-describedby="sku-error"
        />
        {state?.errors?.sku && (
          <div id="sku-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.sku.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <Button type="submit" className="w-full">
        Update Product
      </Button>
    </form>
  );
}
'use client';

import { useFormState } from 'react-dom';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { createProduct, State } from '@/app/inventory/actions';
import { toast } from 'sonner';

export function ProductForm() {
  const initialState: State = { message: null, errors: {} };
  const [state, formAction] = useFormState(createProduct, initialState);

  if (state?.message) {
    if (state.message.includes('Failed')) {
      toast.error(state.message);
    } else {
      toast.success(state.message);
    }
  }

  return (
    <form action={formAction} className="space-y-4">
      <div className="grid gap-2">
        <Label htmlFor="name">Product Name</Label>
        <Input
          id="name"
          name="name"
          type="text"
          required
          aria-describedby="name-error"
        />
        {state?.errors?.name && (
          <div id="name-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.name.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          name="description"
          aria-describedby="description-error"
        />
        {state?.errors?.description && (
          <div id="description-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.description.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="price">Price</Label>
        <Input
          id="price"
          name="price"
          type="number"
          step="0.01"
          required
          aria-describedby="price-error"
        />
        {state?.errors?.price && (
          <div id="price-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.price.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="stock_quantity">Stock Quantity</Label>
        <Input
          id="stock_quantity"
          name="stock_quantity"
          type="number"
          required
          aria-describedby="stock-quantity-error"
        />
        {state?.errors?.stock_quantity && (
          <div id="stock-quantity-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.stock_quantity.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <div className="grid gap-2">
        <Label htmlFor="sku">SKU</Label>
        <Input
          id="sku"
          name="sku"
          type="text"
          aria-describedby="sku-error"
        />
        {state?.errors?.sku && (
          <div id="sku-error" aria-live="polite" className="text-sm text-red-500">
            {state.errors.sku.map((error: string) => (
              <p key={error}>{error}</p>
            ))}
          </div>
        )}
      </div>
      <Button type="submit" className="w-full">
        Create Product
      </Button>
    </form>
  );
}

export default ProductForm;
