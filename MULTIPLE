"use client"

import { useRouter } from "next/navigation"
import { LogOut, Settings, UserIcon } from 'lucide-react'
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import * as React from "react"
import { createClient, type SupabaseClient } from "@supabase/supabase-js"

// Singleton browser client for Supabase
let supabaseClient: SupabaseClient | null = null
function getSupabase(): SupabaseClient {
  if (!supabaseClient) {
    const url = process.env.NEXT_PUBLIC_SUPABASE_URL
    const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    if (!url || !anon) {
      throw new Error("Missing NEXT_PUBLIC_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_ANON_KEY")
    }
    supabaseClient = createClient(url, anon)
  }
  return supabaseClient
}

export type UserButtonProps = {
  name?: string
  email?: string
  imageUrl?: string
  onSignOut?: () => void
}

export default function UserButton({
  name = "User",
  email = "user@example.com",
  imageUrl = "/placeholder-user.jpg",
  onSignOut,
}: UserButtonProps) {
  const router = useRouter()

  const handleSignOut = React.useCallback(async () => {
    if (onSignOut) {
      onSignOut()
      return
    }
    try {
      const supabase = getSupabase()
      await supabase.auth.signOut()
    } catch {
      // ignore and continue navigation
    } finally {
      router.push("/login")
    }
  }, [onSignOut, router])

  const initials = (name || email || "U").slice(0, 2).toUpperCase()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="h-9 px-2">
          <div className="flex items-center gap-2">
            <Avatar className="h-7 w-7">
              <AvatarImage src={imageUrl || "/placeholder.svg"} alt="User avatar" />
              <AvatarFallback>{initials}</AvatarFallback>
            </Avatar>
            <span className="hidden sm:inline text-sm font-medium">{name}</span>
          </div>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-56">
        <DropdownMenuLabel>
          <div className="flex flex-col">
            <span className="text-sm font-medium">{name}</span>
            <span className="text-xs text-muted-foreground">{email}</span>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuItem className="cursor-pointer">
          <UserIcon className="mr-2 h-4 w-4" />
          Profile
        </DropdownMenuItem>
        <DropdownMenuItem className="cursor-pointer">
          <Settings className="mr-2 h-4 w-4" />
          Settings
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={handleSignOut}
          className="cursor-pointer text-red-600 focus:text-red-700"
        >
          <LogOut className="mr-2 h-4 w-4" />
          Sign out
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

"use client"

import * as React from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table"

// Shape returned by Supabase for products
export type DbProduct = {
  id: string
  name: string
  sku: string | null
  price: number
  stock_quantity: number
  description?: string | null
  category?: string | null
  created_at?: string
  user_id?: string
}

export type ProductListProps = {
  products: DbProduct[]
  onEdit?: (id: string) => void
  onDelete?: (id: string) => void
}

export default function ProductList({
  products = [],
  onEdit,
  onDelete,
}: ProductListProps) {
  const fmt = React.useMemo(
    () =>
      new Intl.NumberFormat(undefined, {
        style: "currency",
        currency: "USD",
      }),
    []
  )

  if (products.length === 0) {
    return (
      <div className="text-sm text-muted-foreground">
        No products found.
      </div>
    )
  }

  return (
    <div className="w-full overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="min-w-[180px]">Name</TableHead>
            <TableHead>SKU</TableHead>
            <TableHead className="text-right">Stock</TableHead>
            <TableHead className="text-right">Price</TableHead>
            <TableHead className="text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {products.map((p) => (
            <TableRow key={p.id}>
              <TableCell className="font-medium">{p.name}</TableCell>
              <TableCell>{p.sku ?? "-"}</TableCell>
              <TableCell className="text-right">{p.stock_quantity}</TableCell>
              <TableCell className="text-right">{fmt.format(p.price ?? 0)}</TableCell>
              <TableCell className="text-right space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  asChild
                  onClick={() => onEdit?.(p.id)}
                >
                  <Link href={`/inventory/${p.id}/edit`}>Edit</Link>
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => onDelete?.(p.id)}
                >
                  Delete
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}
